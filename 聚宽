import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import time, requests, os, xlrd, sys
from datetime import timedelta,date
pd.set_option('precision',3)
pd.set_option('display.max_rows',10000)#用于策略
pd.set_option('display.max_columns',10000)#用于策略
pd.set_option('display.width',10000)#用于策略
#-----------------------------------------------------
#指数代码列表
index_list =[
    '000015.XSHG',#红利指数
    '000016.XSHG',#上证50，E
    '000300.XSHG',#沪深300,E
    '000807.XSHG',#食品饮料
    '000827.XSHG',#中证环保，E
    '000852.XSHG',#中证1000指数
    '000905.XSHG',#中证500,E
    '000922.XSHG',#中证红利，E
    '000990.XSHG',#全指消费,E
    '000991.XSHG',#全指医药,E
    '000992.XSHG',#全指金融，E
    '000993.XSHG',#全指信息,该有
    '399006.XSHE',#创业板指,E
    '399812.XSHE',#中证养老产业指数,E
    '399967.XSHE',#中证军工,该有
    '399971.XSHE',#中证传媒指数,E
    '399975.XSHE'#中证全指证券公司指数(四级行业)，E
    ]
#--------------------------------------------------------
# 转换代码
def convert_code(code):
    if code.endswith('XSHG'):
        return 'sh' + code[0:6]
    elif code.endswith('XSHE'):
        return 'sz' + code[0:6]
#-------------------------------------------------------
# 根据传过来的代码和日期，计算当日的pe,pb,采用等权重的计算方法。这个主要被别的方法调用
'''
    我猜测这是一个查询器
    valuation和indicatior都是表名
    这个的作用应该是查询valuation这个总表
    过滤出指数的成份股行
    列是indicator吧，indicator这个我不是很明白
    
    总逻辑：向此方法中传入指数代码和日期
    		get_index_stocks接收指数代码和日期，获取成份股
        	定制查询器，提供成份股列表，查询器整合valuation和indicator表并过滤出成份股的所有信息
            get_fundamentals获取q和日期，获取dataframe表
           
           
           如果dataframe表不为空，初始pe总和以及初始pb总和均为0.
            
            	计算pe
            	循环获取各成份股的信息行
            		如果adjusted_profit_to_profit为nan，那只有采用虚假pe了
            			如果虚假pe大于等于0,等于0这个是否合理待定
            				总市值加1(pe计数加1，这个视为等权的市值)
            				叠加等权盈利(1/虚假pe)
            		如果adjusted_profit_to_profit不为nan，那么可以采用真实pe了
            			如果真实pe = 虚假pe/aptp*100 = （总市值/初始总盈利）/（真实盈利/初始总盈利）=总市值/真实盈利 大于等于0，等于0的合理性待定
            				总市值加1(pe计数加1，这个视为等权的市值)
            				叠加等权盈利(1/真实pe)
            	pe = 总市值/总盈利
            	
            	计算pb
            	循环获取各成份股的信息行
            		如果pb大于等于0
            			总市值加1，视为等权
            			叠加等权净资产
            	pb = 总市值/总净资产
            返回pe,pb	
    '''     
def get_index_pe_pb_date(code,date):
    stocks = get_index_stocks(code, date)	
    q = query(valuation, indicator).filter(valuation.code.in_(stocks)) 
   
    df = get_fundamentals(q, date)
    if len(df)>0:
        pe_plus_num = 0
        sum_e  = 0
        pb_plus_num = 0
        sum_b  = 0
#pe计算
        for i in range(0, len(df)):
            if math.isnan(df['adjusted_profit_to_profit'][i]): 
                if (df['pe_ratio'][i])>=0 :
                    pe_plus_num = pe_plus_num + 1
                    sum_e = sum_e + 1.0 /(df['pe_ratio'][i])
            else:
                if (df['pe_ratio'][i])/(df['adjusted_profit_to_profit'][i]) >=0 :
                    pe_plus_num = pe_plus_num + 1
                    sum_e = sum_e + 1.0 /((df['pe_ratio'][i])/(df['adjusted_profit_to_profit'][i]/100))
        pe= pe_plus_num /sum_e
#pb计算
        for i in range(0, len(df)):
            if df['pb_ratio'][i] >= 0 :
                pb_plus_num = pb_plus_num + 1
                sum_b = sum_b + 1.0 / df['pb_ratio'][i]
        pb= pb_plus_num /sum_b
        return (round(pe,2), round(pb,2))
    else:
        return float('NaN')
#------------------------------------------------------
def get_index_pe_pb(code, start_date=None, end_date=None):
    '''指数历史PE_PB
    如果传进来的起始日期为空，获取指数起始日期，如果早于05年，以05年为准。
    如果传进来的结束日期为空，以昨日为止，猜测。
    获取指数起始日到终止日每日的收市价格
    日期列表从get_price的DataFrame中具象化
    调用get_index_pe_pb_date方法，传入data_list里的每一个日期，接收返回的pe,pb值，放回到pe,pb的表里
    构建一个DataFrame的df,并返回之
    '''
    if start_date is None:
        start_date = get_security_info(code).start_date
        if start_date < date(2005,01,04): #只计算2005年以来的数据
            start_date = date(2005,01,04)
    if end_date is None:
        end_date = pd.datetime.today() - timedelta(1)
    x = get_price(code, start_date=start_date, end_date=end_date, frequency='daily', fields='close');'''获取指数起始日到终止日每日的收市价格'''
    date_list = x.index.tolist()
#     print date_list
    pe_list = []
    pb_list = []
    for d in date_list: #交易日
        pe_pb = get_index_pe_pb_date(code,d)
        pe_list.append(pe_pb[0])
        pb_list.append(pe_pb[1])
    df = pd.DataFrame({'PE': pd.Series(pe_list, index=date_list),
                        'PB': pd.Series(pb_list, index=date_list)})
    return df

def get_hs_data(index_list,data_root='./'):
    '''增量更新沪深指数估值数据'''
    for code in index_list:
        print u'正在计算:', code
        data_path = '%s%s_pe_pb.csv'%(data_root,convert_code(code))
        if os.path.exists(data_path):#增量更新
            df_pe_pb = pd.DataFrame.from_csv(data_path)
            start_date = df_pe_pb.iloc[-1].name + timedelta(1)
            df_pe_pb = pd.concat([df_pe_pb, get_index_pe_pb(code, start_date)]) 
        else:#初次计算
            print 'init'
            df_pe_pb = get_index_pe_pb(code)
        df_pe_pb.to_csv(data_path)

def calc_state(data):
    if data < 10.0:
        return u'极度低估'
    elif 10 <= data  and data < 20:
        return u'低估'
    elif 20 <= data  and data < 40:
        return u'正常偏低'
    elif 40 <= data  and data < 60:
        return u'正常'
    elif 60 <= data  and data < 80:
        return u'正常偏高'
    elif 80 <= data  and data < 90:
        return u'高估'
    elif 90 <= data:
        return u'极度高估'

def pe_pb_analysis(index_list=['000300.XSHG','000905.XSHG'],data_root='./'):
    '''PE_PB分析'''
    all_index = get_all_securities(['index'])

    pe_results = []
    pe_code_list = []
    pb_results = []
    pb_code_list = []
    #沪深
    for code in index_list:
        data_path = '%s%s_pe_pb.csv'%(data_root,convert_code(code))
        index_name = all_index.ix[code].display_name
        df_pe_pb = pd.DataFrame.from_csv(data_path)
        df_pe_pb = df_pe_pb[df_pe_pb.iloc[-1].name.date() - timedelta(365*10):] #最长十年的数据
        if len(df_pe_pb)<250*3: #每年250个交易日,小于3年不具有参考价值
#                 print code, 'samples:', len(df_pe_pb), index_name
            continue
        pe_ratio = len(df_pe_pb.PE[df_pe_pb.PE<df_pe_pb.iloc[-1].PE])/float(len(df_pe_pb.PE))*100
        pb_ratio = len(df_pe_pb.PB[df_pe_pb.PB<df_pe_pb.iloc[-1].PB])/float(len(df_pe_pb.PB))*100        
        pe_results.append([index_name, df_pe_pb.iloc[-1].PE, '%.2f'%pe_ratio, calc_state(pe_ratio),
                           min(df_pe_pb.PE), max(df_pe_pb.PE), '%.2f'%median(df_pe_pb.PE), '%.2f'%std(df_pe_pb.PE),
                           df_pe_pb.iloc[0].name.date()])
        pb_results.append([index_name, df_pe_pb.iloc[-1].PB, '%.2f'%pb_ratio, calc_state(pb_ratio),
                           min(df_pe_pb.PB), max(df_pe_pb.PB), '%.2f'%median(df_pe_pb.PB),'%.2f'%std(df_pe_pb.PB),
                           df_pe_pb.iloc[0].name.date()])
        pe_code_list.append(code)
        pb_code_list.append(code)
 
#     print '估值日期: ', df_pe_pb.iloc[-1].name.date()
    date_str = df_pe_pb.iloc[-1].name.date().strftime('%Y%m%d')
    pe_columns=[u'名称', u'当前PE', u'百分位(%)', u'估值状态', u'最小', u'最大', u'中位数', u'标准差', u'起始日期']
    pe_df = pd.DataFrame(data=pe_results,index=pe_code_list,columns=pe_columns)
    pe_df.index = pe_df[u'名称']
    del pe_df[u'名称']
    pe_df.index.name = date_str
    
    pb_columns=[u'名称', u'当前PB', u'百分位(%)', u'估值状态', u'最小', u'最大', u'中位数', u'标准差', u'起始日期']
    pb_df = pd.DataFrame(data=pb_results,index=pb_code_list,columns=pb_columns)
    pb_df.index = pb_df[u'名称']
    del pb_df[u'名称']
    pb_df.index.name = date_str
    
    return (pe_df.sort([u'百分位(%)'],ascending=True), pb_df.sort([u'百分位(%)'],ascending=True))

get_hs_data(index_list) #沪深数据
(pe_df, pb_df) = pe_pb_analysis(index_list)
print pe_df.index.name
pe_df.index.name = None
pe_df        
        
